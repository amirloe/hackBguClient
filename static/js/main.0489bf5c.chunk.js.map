{"version":3,"sources":["zoomate.jpeg","Components/GroupInfo.js","Components/OpenGroupForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GroupInfo","props","groups","this","map","group","x","key","id","courseName","Description","zoomUrl","Table","striped","bordered","hover","React","Component","OpenGroupForm","maxChange","event","setState","maxNum","target","value","leaderChange","groupLeader","zoomLinkChange","zoomLink","groupDescriptionChange","courseNameChange","dateChange","date","timeChange","time","submitFunc","setNewRow","state","groupDescription","groupSize","Date","Form","className","onSubmit","preventDefault","Row","Group","controlId","Label","Control","placeholder","onChange","as","Col","type","Button","variant","size","onClick","App","setHours","row","startTime","newRow","rows","concat","alert","showhours","showForm","show","courses","showH","filter","chooseText","buttons","name","calendarType","onClickDay","style","backgroundColor","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0489bf5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zoomate.e431bd55.jpeg\";","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nclass GroupInfo extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n    }\r\n\r\n    render(){\r\n        var groups = this.props.groups.map(\r\n            (group,x)=>\r\n                <tr key={x}>\r\n                <td>{group.id}</td>\r\n                <td>{group.courseName}</td>\r\n                <td>{group.Description}</td>\r\n                <td>{group.zoomUrl}</td>\r\n                <td><button>click here</button></td>\r\n              </tr>\r\n            \r\n        )\r\n        return <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Course Name</th>\r\n            <th>Descriprion</th>\r\n            <th>Zoom Url</th>\r\n            <th>Join</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {groups}\r\n        </tbody>\r\n      </Table>\r\n      \r\n      \r\n    }\r\n}\r\n\r\nexport default GroupInfo;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nclass OpenGroupForm extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        maxNum:1,\r\n        groupSize:1,\r\n        groupLeader:\"\",\r\n        zoomLink:\"\",\r\n        groupLeader:\"\",\r\n        courseName:\"\",\r\n        date:new Date(),\r\n        time:\"\"\r\n      }\r\n    }\r\n\r\n    maxChange = (event)=>{\r\n      this.setState({maxNum:event.target.value})\r\n    }\r\n    leaderChange = (event)=>{\r\n      this.setState({groupLeader:event.target.value})\r\n    }\r\n    zoomLinkChange = (event)=>{\r\n      this.setState({zoomLink:event.target.value})\r\n    }\r\n    groupDescriptionChange = (event)=>{\r\n      this.setState({groupLeader:event.target.value})\r\n    }\r\n    courseNameChange = (event)=>{\r\n      this.setState({courseName:event.target.value})\r\n    }\r\n    dateChange = (event)=>{\r\n      this.setState({date:event.target.value})\r\n    }\r\n    timeChange = (event)=>{\r\n      this.setState({time:event.target.value})\r\n    }\r\n    submitFunc=()=>{this.props.setNewRow(this.state.maxNum,this.state.groupLeader,this.state.courseName,this.state.groupDescription,\r\n      this.state.zoomLink,this.state.date,this.state.time)\r\n    \r\n    }\r\n\r\n    render(){\r\n            \r\n        return <Form  className onSubmit={(event)=>{event.preventDefault()}}>\r\n        <Form.Row>\r\n\r\n        <Form.Group controlId=\"GroupLeader\">\r\n          <Form.Label>Group Leader</Form.Label>\r\n          <Form.Control placeholder=\"Israel Israeli\" onChange={this.leaderChange} />\r\n         </Form.Group>\r\n\r\n          <Form.Group as={Col} controlId=\"ZoomLink\">\r\n            <Form.Label>Zoom Link</Form.Label>\r\n            <Form.Control type=\"link\" placeholder=\"Enter URL\" onChange={this.zoomLinkChange} />\r\n          </Form.Group>\r\n      \r\n          <Form.Group as={Col} controlId=\"GroupDescription\">\r\n            <Form.Label>Group description</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"what's your group goal? \" onChange={this.groupDescriptionChange} />\r\n          </Form.Group>\r\n        </Form.Row>\r\n            \r\n      \r\n        <Form.Group controlId=\"CourseName\">\r\n          <Form.Label>Course Name</Form.Label>\r\n          <Form.Control placeholder={this.props.courseName} onChange={this.courseNameChange}/>\r\n        </Form.Group> \r\n      \r\n        <Form.Row>\r\n          <Form.Group as={Col} controlId=\"Date\">\r\n            <Form.Label>Date</Form.Label>\r\n            <Form.Control placeholder={this.props.date} onChange={this.dateChange}/>\r\n          </Form.Group>\r\n      \r\n          <Form.Group as={Col} controlId=\"MettingStartTime\">\r\n            <Form.Label>Metting Start Time</Form.Label>\r\n            <Form.Control type=\"time\" onChange={this.timeChange}>\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Form.Row>\r\n\r\n        <Form.Row>\r\n\r\n        <Form.Group controlId=\"Max participants\">\r\n          <Form.Label>Max participants</Form.Label>\r\n          <Form.Control placeholder=\"99\" onChange={this.maxChange} />\r\n         </Form.Group>\r\n\r\n  \r\n          </Form.Row>\r\n            \r\n        <Button variant=\"info\"  size=\"sm\" type=\"submit\" onClick={this.submitFunc}>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      \r\n    }\r\n}\r\n\r\nexport default OpenGroupForm;","\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport GroupInfo from './Components/GroupInfo';\r\nimport OpenGroupForm from './Components/OpenGroupForm';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport logo from './zoomate.jpeg';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      id:0,\r\n      date: new Date(),\r\n      show:false,\r\n      showhours:false,\r\n      showForm:false,\r\n      courseName:\"\",\r\n      courses:[\"לוגיקה ותורת הקבוצות\",\"אלגברה\",\"חדווא 1\",\"מבוא למדעי המחשב\"],\r\n      rows:[]\r\n    }\r\n  }\r\n  \r\n\r\n  onChange = date => {\r\n    let x = new Date(new Date(date).setHours(6));\r\n    this.setState({ date:x })\r\n  }\r\n\r\n\r\n//3. render the scheduler component, mind that the Scheduler component should be placed in a DragDropContext(father or ancestor).\r\nsetNewRow=(maxNum,groupLeader,courseName,groupDescription,zoomLink,date,time)=>{\r\n  var row={id:this.state.id,maxNum:maxNum,groupSize:1,groupLeader:groupLeader,courseName:courseName,Description:groupDescription,startTime:time,date:date,zoomUrl:zoomLink}\r\n  var newRow=this.state.rows.concat(row)\r\n  alert(\"Group created!\")\r\n   this.setState({rows:newRow,id:this.state.id+1})\r\n   this.setState({ showhours:true , showForm:false})\r\n}\r\n\r\nrender(){\r\n \r\n  const showH =this.state.showhours?\r\n  <div className='mu-2'>\r\n\r\n  <GroupInfo groups={this.state.rows.filter((x)=>(x.date===this.state.date)&&(x.courseName===this.state.courseName))}></GroupInfo>\r\n  <Button className='m-4' onClick={()=>{this.setState({showhours:false,showForm:true})}}>Open new Group</Button>\r\n  </div>\r\n: this.state.showForm?\r\n<OpenGroupForm courseName={this.state.courseName} date={this.state.date} setNewRow={this.setNewRow}></OpenGroupForm>\r\n:\r\n<h2></h2>\r\n\r\nvar chooseText = !this.state.showhours && !this.state.showForm ? \" Choose your date (pun intended) ;)\" : \"\";\r\n\r\nvar buttons = this.state.courses.map(\r\n  (name,x)=><Button key={x} className='m-3'  onClick={()=>this.setState({show:true,courseName:name})}>{name}</Button>)\r\n\r\n  const x = this.state.show?  <main>\r\n    <h5 className=\"choice-text\">{chooseText}</h5>\r\n                              <Calendar\r\n                            className=\"c1\"\r\n                            onChange={this.onChange}\r\n                            value={this.state.date}\r\n                            calendarType=\"Hebrew\"\r\n                            onClickDay={()=>{this.setState({showhours:true})}}\r\n                            />\r\n                            {showH}\r\n                            <div>\r\n                            <Button className=\"text-center mu-5\" onClick={()=>this.setState({show:false, showhours:false , showForm:false})}>back</Button>\r\n                            </div>\r\n                            </main> \r\n                            : <div>\r\n                            {buttons}\r\n                              </div>;\r\n\r\n  return (\r\n    <main style={{\r\n      backgroundColor: 'white',\r\n\r\n    }}>\r\n      \r\n\r\n\r\n      <img src={logo} className='logo' alt=\"Zoomate\" ></img>\r\n      <div className='center'>\r\n      {x}\r\n   </div>\r\n\r\n    </main>\r\n  );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}